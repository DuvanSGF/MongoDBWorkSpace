
{
  "author": "Ing. Duván Albeiro Mejia Cortes",
  "create date:": "23-01-2024",
  "description": "MongoDB documentation and querys review"
},




//Find()
db.transactions.find({transactions:{$elemMatch: { amount:{$lte: 4500 }, transaction_code: "sell"},},})


db.transactions.find({
    transactions: {
      $elemMatch: { amount: { $lte: 4500 }, transaction_code: "sell" },
    },
  })
  
  
  db.sales.find({
    $or: [{ "items.name": "pens" }, { "items.tags": "writing" }],
  }) 

  db.birds.replaceOne(
  { _id: ObjectId("6286809e2f3fa87b7d86dccd") },
  {
    common_name: "Morning Dove",
    scientific_name: "Zenaida macroura",
    wingspan_cm: 37.23,
    habitat: ["urban areas", "farms", "grassland"],
    diet: ["seeds"],
  }
)




//Update Docuemnt Creatin a new fields 
db.birds.updateOne(
  {
    common_name: "Canada Goose",
  },
  {
    $set: {
      tags: ["geese", "herbivore", "migration"],
    },
  }
)

//Use the $each modifier to add multiple elements to the array.
db.birds.updateOne(
  { _id: ObjectId("6268471e613e55b82d7065d7") },
  {
    $push: {
      diet: { $each: ["newts", "opossum", "skunks", "squirrels"] },
    },
  }
)



/*
In the update document, use the $set operator to set the last_updated field to the current date and time, and the $inc operator to increment the sightings field by 1.
In the update document, set the last_updated field to the current date and time using the new Date() method.
Provide the upsert option to create a new document if no documents are found matching the query.
*/
db.birds.updateOne(
  {
    common_name: "Robin Redbreast",
  },
  {
    $inc: {
      "sightings": 1,
    },
    $set: {
      last_updated: new Date(),
    },
  },
  {
    upsert: true,
  }
)

// Modify
db.birds.findAndModify({
  query: { common_name: "Blue Jay" },
  update: { $inc: { sightings_count: 1 }},
  new: true,
})




/*
What would happen if you ran the following query on the zips collection? Note that there is currently no document for the city of Taos. (Select one.)

R: A new document would be inserted because the upsert option is set to true.
Your Answer: Correct

Correct! When the upsert option is set to true, a new document will be inserted if one does not already exist. For existing documents, the upsert option will cause the document to be updated.

*/
db.zips.findAndModify({
  query: { zip: 87571 },
  update: { $set: { city: "TAOS", state: "NM", pop: 40000 } },
  upsert: true,
  new: true,
})



/*
Updating MongoDB Documents by Using updateMany()

To update multiple documents, use the updateMany() method. This method accepts a filter document, an update document, and an optional options object. The following code shows an example:
*/
db.books.updateMany(
  { publishedDate: { $lt: new Date("2019-01-01") } },
  { $set: { status: "LEGACY" } }
)

/*
Update the last_seen date to 2022-01-01 for Blue Jay and Grackle in the birds collection.
*/
db.birds.updateMany(
  {
    common_name: {
      $in: ["Blue Jay", "Grackle"],
    },
  },
  {
    $set: {
      last_seen: ISODate("2022-01-01"),
    },
  }
)

/*
Deleting Documents in MongoDB

To delete documents, use the deleteOne() or deleteMany() methods. Both methods accept a filter document and an options object.
Delete One Document

The following code shows an example of the deleteOne() method:
*/
db.podcasts.deleteOne({ _id: Objectid("6282c9862acb966e76bbf20a") })
/*
Delete Many Documents

The following code shows an example of the deleteMany() method:
*/
db.podcasts.deleteMany({category: “crime”})

db.birds.deleteMany({ sightings_count: { $lte: 10 } })



/*
Sorting Results

Use cursor.sort() to return query results in a specified order. Within the parentheses of sort(), include an object that specifies the field(s) to sort by and the order of the sort. Use 1 for ascending order, and -1 for descending order.

Syntax:

db.collection.find(<query>).sort(<sort>)

Example:
*/

// Return data on all music companies, sorted alphabetically from A to Z.
db.companies.find({ category_code: "music" }).sort({ name: 1 });

//To ensure documents are returned in a consistent order, include a field that contains unique values in the sort. An easy way to do this is to include the _id field in the sort. Here's an example:

// Return data on all music companies, sorted alphabetically from A to Z. Ensure consistent sort order
db.companies.find({ category_code: "music" }).sort({ name: 1, _id: 1 });


/*Limiting Results

Use cursor.limit() to return query results in a specified order. Within the parentheses of limit(), specify the maximum number of documents to return.

Syntax:

db.companies.find(<query>).limit(<number>)

Example:*/

// Return the three music companies with the highest number of employees. Ensure consistent sort order.
db.companies
  .find({ category_code: "music" })
  .sort({ number_of_employees: -1, _id: 1 })
  .limit(3);

  db.sales.find({}).sort({ saleDate: 1 })

  db.sales.find({ purchaseMethod: "Online", couponUsed: true}).sort({ saleDate: -1 })

  db.sales.find({ "items.name": { $in: ["laptop", "backpack", "printer paper"] }, "storeLocation": "London", }).sort({ saleDate: -1, }).limit(3)


  /*Returning Specific Data from a Query in MongoDB

  Review the following code, which demonstrates how to return selected fields from a query.
  Add a Projection Document
  
  To specify fields to include or exclude in the result set, add a projection document as the second parameter in the call to db.collection.find().
  
  Syntax:
  
  db.collection.find( <query>, <projection> )
  
  Include a Field
  
  To include a field, set its value to 1 in the projection document.
  
  Syntax:
  
  db.collection.find( <query>, { <field> : 1 })
  
  Example:*/
  
  // Return all restaurant inspections - business name, result, and _id fields only
  db.inspections.find(
    { sector: "Restaurant - 818" },
    { business_name: 1, result: 1 }
  )
  
  /*
  Exclude a Field
  
  To exclude a field, set its value to 0 in the projection document.
  
  Syntax:
  
  db.collection.find(query, { <field> : 0, <field>: 0 })
  
  Example:*/
  
  // Return all inspections with result of "Pass" or "Warning" - exclude date and zip code
  db.inspections.find(
    { result: { $in: ["Pass", "Warning"] } },
    { date: 0, "address.zip": 0 }
  )
  
  //While the _id field is included by default, it can be suppressed by setting its value to 0 in any projection.
  
  // Return all restaurant inspections - business name and result fields only
  db.inspections.find(
    { sector: "Restaurant - 818" },
    { business_name: 1, result: 1, _id: 0 }
  )
  
 
  /*
  Query for all sales at the Denver store. Return only the sale date, store location, purchase method and _id fields.(Forgot the command? Check the hint below!)
  */

  db.sales.find({ storeLocation: "Denver", }, { storeLocation: 1, saleDate: 1, purchaseMethod: 1, })  
  db.sales.find({ "customer.age": { $lt: 30 }, "customer.satisfaction": { $gt: 3 }, }, { "customer.satisfaction": 1, "customer.age": 1, "storeLocation": 1, "saleDate": 1, "_id": 0, });
  db.sales.find({ storeLocation: { $in: ["Seattle", "New York"] }, }, { couponUsed: 0, purchaseMethod: 0, customer: 0, })
  
  
  
/*Counting Documents in a MongoDB Collection

Review the following code, which demonstrates how to count the number of documents that match a query.
Count Documents

Use db.collection.countDocuments() to count the number of documents that match a query. countDocuments() takes two parameters: a query document and an options document.

Syntax:

db.collection.countDocuments( <query>, <options> )

The query selects the documents to be counted.

Examples:*/

// Count number of docs in trip collection
db.trips.countDocuments({})

// Count number of trips over 120 minutes by subscribers
db.trips.countDocuments({ tripduration: { $gt: 120 }, usertype: "Subscriber" })

db.sales.countDocuments({ storeLocation: "Denver", couponUsed: true })

db.sales.countDocuments({ items: { $elemMatch: { name: "laptop", price: { $lt: 600 } } } } )


/*Using $match and $group Stages in a MongoDB Aggregation Pipeline

Review the following sections, which show the code for the $match and $group aggregation stages.
$match

The $match stage filters for documents that match specified conditions. Here's the code for $match:
*/

{
  $match: {
     "field_name": "value"
  }
}

/*
$group

The $group stage groups documents by a group key.
*/

{
  $group:
    {
      _id: <expression>, // Group key
      <field>: { <accumulator> : <expression> }
    }
 }

/*$match and $group in an Aggregation Pipeline

The following aggregation pipeline finds the documents with a field named "state" that matches a value "CA" and then groups those documents by the group key "$city" and shows the total number of zip codes in the state of California.
*/

db.zips.aggregate([
{   
   $match: { 
      state: "CA"
    }
},
{
   $group: {
      _id: "$city",
      totalZips: { $count : { } }
   }
}
])



db.sightings.aggregate([
  {
    $match: {
        species_common: 'Eastern Bluebird'
    }
  }, {
    $group: {
        _id: '$location.coordinates',
        number_of_sightings: {
            $count: {}
        }
    }
  }
])



/*
Using $sort and $limit Stages in a MongoDB Aggregation Pipeline

Review the following sections, which show the code for the $sort and $limit aggregation stages.

$sort

The $sort stage sorts all input documents and returns them to the pipeline in sorted order. We use 1 to represent ascending order, and -1 to represent descending order.
*/
{
    $sort: {
        "field_name": 1
    }
}



/*$limit

The $limit stage returns only a specified number of records.
*/

{
  $limit: 5
}

/*
$sort and $limit in an Aggregation Pipeline

The following aggregation pipeline sorts the documents in descending order, so the documents with the greatest pop value appear first, and limits the output to only the first five documents after sorting.
*/

db.zips.aggregate([
{
  $sort: {
    pop: -1
  }
},
{
  $limit:  5
}
])



db.sightings.aggregate([
  {
    $sort: {
        'location.coordinates.1': -1
    }
  }, {
    $limit: 4
  }
])


/*
Using $project, $count, and $set Stages in a MongoDB Aggregation Pipeline

Review the following sections, which show the code for the $project, $set, and $count aggregation stages.
$project

The $project stage specifies the fields of the output documents. 1 means that the field should be included, and 0 means that the field should be supressed. The field can also be assigned a new value.
*/

{
    $project: {
        state:1, 
        zip:1,
        population:"$pop",
        _id:0
    }
}

/*
$set

The $set stage creates new fields or changes the value of existing fields, and then outputs the documents with the new fields.
*/

{
    $set: {
        place: {
            $concat:["$city",",","$state"]
        },
        pop:10000
     }
  }


 /* 
$count

The $count stage creates a new document, with the number of documents at that stage in the aggregation pipeline assigned to the specified field name.
*/

{
  $count: "total_zips"
}


db.sightings.aggregate([
  {
    $project: {
        _id: 0,
        species_common: 1,
        date: 1
    }
  }
])


db.birds.aggregate([
  {
    $set: {
      'class': 'bird'
    }
  }
])


db.sightings.aggregate([
  {
    $match: {
      date: {
        $gt: ISODate('2022-01-01T00:00:00.000Z'),
        $lt: ISODate('2023-01-01T00:00:00.000Z')
      },
      species_common: 'Eastern Bluebird'
    }
  }, {
    $count: 'bluebird_sightings_2022'
  }
  ])

// $out
  db.sightings.aggregate([
    {
      $match: {
        date: {
          $gte: ISODate('2022-01-01T00:00:00.0Z'),
          $lt: ISODate('2023-01-01T00:00:00.0Z')
        }
      }
    },
    {
      $out: 'sightings_2022'
    }
  ])
  db.sightings_2022.findOne() 

/*
  Creating a Single Field Index

  Review the code below, which demonstrates how to create a single field index in a collection.
  
  Create a Single Field Index
  
  Use createIndex() to create a new index in a collection. Within the parentheses of createIndex(), include an object that contains the field and sort order.
  */
  db.customers.createIndex({
    birthdate: 1
  })
  
  
 /* Create a Unique Single Field Index
  
  Add {unique:true} as a second, optional, parameter in createIndex() to force uniqueness in the index field values. Once the unique index is created, any inserts or updates including duplicated values in the collection for the index field/s will fail.
  */

  db.customers.createIndex({
    email: 1
  },
  {
    unique:true
  })
  
  /*
  MongoDB only creates the unique index if there is no duplication in the field values for the index field/s.

  View the Indexes used in a Collection

  Use getIndexes() to see all the indexes created in a collection.
  */

  db.customers.getIndexes()
  
  /*
  Check if an index is being used on a query
  
  Use explain() in a collection when running a query to see the Execution plan. This plan provides the details of the execution stages (IXSCAN , COLLSCAN, FETCH, SORT, etc.).
  
      The IXSCAN stage indicates the query is using an index and what index is being selected.
      The COLLSCAN stage indicates a collection scan is perform, not using any indexes.
      The FETCH stage indicates documents are being read from the collection.
      The SORT stage indicates documents are being sorted in memory.
 */

  db.customers.explain().find({
    birthdate: {
      $gt:ISODate("1995-08-01")
      }
    })
  
  db.customers.explain().find({
    birthdate: {
      $gt:ISODate("1995-08-01")
      }
    }).sort({
      email:1
      }) 



db.accounts.createIndex({ account_id: 1 }, { unique: true })

//Explain
db.accounts.explain().find({ account_id: "MDB829000996" })      


/*
Understanding Multikey Indexes

Review the code below, which demonstrates how multikey indexes work. If a single field or compound index includes an array field, then the index is a multikey index.

Create a Single field Multikey Index

Use createIndex() to create a new index in a collection. Include an object as parameter that contains the array field and sort order. In this example accounts is an array field.
*/

db.customers.createIndex({
  accounts: 1
})

/*
View the Indexes used in a Collection

Use getIndexes() to see all the indexes created in a collection.
*/

db.customers.getIndexes()

/*
Check if an index is being used on a query

Use explain() in a collection when running a query to see the Execution plan. This plan provides the details of the execution stages (IXSCAN , COLLSCAN, FETCH, SORT, etc.).

    The IXSCAN stage indicates the query is using an index and what index is being selected.
    The COLLSCAN stage indicates a collection scan is perform, not using any indexes.
    The FETCH stage indicates documents are being read from the collection.
    The SORT stage indicates documents are being sorted in memory.
*/
db.customers.explain().find({
  accounts: 627788
  })

 // create a multikey index on the `transfers_complete` field:
db.accounts.createIndex({ transfers_complete: 1 })

// use the explain followed by the find method to view the winningPlan for a query that finds a specific `completed_transfers` array element
db.accounts.explain().find({ transfers_complete: { $in: ["TR617907396"] } }) 


/*
Working with Compound Indexes

Review the code below, which demonstrates how to create a compound index in a collection.

Create a Compound Index

Use createIndex() to create a new index in a collection. Within the parentheses of createIndex(), include an object that contains two or more fields and their sort order.
*/

db.customers.createIndex({
  active:1, 
  birthdate:-1,
  name:1
})

/*
Order of Fields in a Compound Index

The order of the fields matters when creating the index and the sort order. It is recommended to list the fields in the following order: Equality, Sort, and Range.

    Equality: field/s that matches on a single field value in a query
    Sort: field/s that orders the results by in a query
    Range: field/s that the query filter in a range of valid values

The following query includes an equality match on the active field, a sort on birthday (descending) and name (ascending), and a range query on birthday too.
*/

db.customers.find({
  birthdate: {
    $gte:ISODate("1977-01-01")
    },
    active:true
    }).sort({
      birthdate:-1, 
      name:1
      })

//Here's an example of an efficient index for this query:

db.customers.createIndex({
  active:1, 
  birthdate:-1,
  name:1
})


/*
View the Indexes used in a Collection

Use getIndexes() to see all the indexes created in a collection.
*/

db.customers.getIndexes()

/*
Check if an index is being used on a query

Use explain() in a collection when running a query to see the Execution plan. This plan provides the details of the execution stages (IXSCAN , COLLSCAN, FETCH, SORT, etc.). Some of these are:

    The IXSCAN stage indicates the query is using an index and what index is being selected.
    The COLLSCAN stage indicates a collection scan is perform, not using any indexes.
    The FETCH stage indicates documents are being read from the collection.
    The SORT stage indicates documents are being sorted in memory.
*/

db.customers.explain().find({
  birthdate: {
    $gte:ISODate("1977-01-01")
    },
  active:true
  }).sort({
    birthdate:-1,
    name:1
    })


/*
Cover a query by the Index

An Index covers a query when MongoDB does not need to fetch the data from memory since all the required data is already returned by the index.

In most cases, we can use projections to return only the required fields and cover the query. Make sure those fields in the projection are in the index.

By adding the projection {name:1,birthdate:1,_id:0} in the previous query, we can limit the returned fields to only name and birthdate. These fields are part of the index and when we run the explain() command, the execution plan shows only two stages:

    IXSCAN - Index scan using the compound index
    PROJECTION_COVERED - All the information needed is returned by the index, no need to fetch from memory
*/

db.customers.explain().find({
  birthdate: {
    $gte:ISODate("1977-01-01")
    },
  active:true
  },
  {name:1,
    birthdate:1, 
    _id:0
  }).sort({
    birthdate:-1,
    name:1
    })


// create a compound index using the `account_holder`, `balance` and `account_type` fields:
db.accounts.createIndex({ account_holder: 1, balance: 1, account_type: 1 })

// Use the explain method to view the winning plan for a query
db.accounts.explain().find({ account_holder: "Andrea", balance:{ $gt :5 }}, { account_holder: 1, balance: 1, account_type:1, _id: 0}).sort({ balance: 1 })

/*
Deleting an Index

Review the code below, which demonstrates how to delete indexes in a collection.

View the Indexes used in a Collection

Use getIndexes() to see all the indexes created in a collection. There is always a default index in every collection on _id field. This index is used by MongoDB internally and cannot be deleted.
*/


db.customers.getIndexes()

/*
Delete an Index

Use dropIndex() to delete an existing index from a collection. Within the parentheses of dropIndex(), include an object representing the index key or provide the index name as a string.

Delete index by name:
*/


db.customers.dropIndex(
  'active_1_birthdate_-1_name_1'
)

Delete index by key:

db.customers.dropIndex({
  active:1,
  birthdate:-1, 
  name:1
})


/*
Delete Indexes

Use dropIndexes() to delete all the indexes from a collection, with the exception of the default index on _id.

db.customers.dropIndexes()

The dropIndexes() command also can accept an array of index names as a parameter to delete a specific list of indexes.
*/



db.collection.dropIndexes([
  'index1name', 'index2name', 'index3name'
  ])

db.accounts.dropIndex("account_holder_1")



db.sales.findOne()

var pipeline = [
  {
    $search: {
      index: 'sample_supplies-sales-dynamic',
      text: {
        query: 'notepad',
        path: { 'wildcard': '*' }
      } } },
  {
    $set: {
      score: { $meta: "searchScore" }
      }
  }
]
db.sales.aggregate(pipeline)




/*Advance Search Static


Next, create an aggregation pipeline, which will contain two stages. (Forgot the method for aggregation? Check the hint below!)

Create a $search stage that uses the index sample_supplies-sales-static with query value of London and a path wildcard of *.

Create a $set stage that adds a new field score to the document to represent the Atlas Search score { $meta: "searchScore" }.

Review the documents outputted and note they now include a score, the object_id, and the fields that matched the search term. 
The score is based on how much that record matches the search term and on the rules described in the index. In this case, with a static mapping for the index, 
the field storeLocation is what is used for the score calculation.
*/


db.sales.aggregate([
  {
    $search: {
      index: 'sample_supplies-sales-static',
      text: {
        query: 'London', path: { 'wildcard': '*' }
      } } },
  {
    $set: {
      score: { $meta: "searchScore" }
      }
  }
])



/*
Using $search and Compound Operators

The compound operator within the $search aggregation stage allows us to give weight to different field and also 
filter our results without having to create additional aggregation stages. The four options for the compound operator are "must", "mustNot, "should", and "filter".

"must" will exclude records that do not meet the criteria. "mustNot" will exclude results that do meet the criteria. 
"should" will allow you to give weight to results that do meet the criteria so that they appear first. "filter" will remove results that do not meet the criteria.
*/

$search {
  "compound": {
    "must": [{
      "text": {
        "query": "field",
        "path": "habitat"
      }
    }],
    "should": [{
      "range": {
        "gte": 45,
        "path": "wingspan_cm",
        "score": {"constant": {"value": 5}}
      }
    }]
  }
}

db.sales.aggregate([
  {
    $search: {
      index: 'sample_supplies-sales-dynamic',
      "compound": {
        "filter": [
          {
            "text": {
              "query": "Online",
              "path": "purchaseMethod"
            }
          }
        ],
        "should": [
          {
            "text": {
              "query": "notepad",
              "path": "items.name",
              "score": { "constant": { "value": 5 } }
            }
          }
      ]
      }
    }
  },
  {
    $project: {
    "items.name": 1,
    "purchaseMethod": 1,
    "score": { $meta: "searchScore" }
    }
  }
])


/*
Grouping Search Results by Using Facets
$searchMeta and $facet

$searchMeta is an aggregation stage for Atlas Search where the metadata related to the search is shown. 
This means that if our search results are broken into buckets, using $facet, we can see that in the $searchMeta stage, because those buckets are information about how the search results are formatted.
*/

$searchMeta: {
    "facet": {
        "operator": {
            "text": {
            "query": ["Northern Cardinal"],
            "path": "common_name"
            }
        },
        "facets": {
            "sightingWeekFacet": {
                "type": "date",
                "path": "sighting",
                "boundaries": [ISODate("2022-01-01"), 
                    ISODate("2022-01-08"),
                    ISODate("2022-01-15"),
                    ISODate("2022-01-22")],
                "default" : "other"
            }
        }
    }
}

//"facet" is an operator within $searchMeta. "operator" refers to the search operator - the query itself. 
//"facets" operator is where we put the definition of the buckets for the facets.


db.sales.aggregate([
  {
    $searchMeta: {
      index: 'sample_supplies-sales-facets',
        "facet": {
            "operator": {
                "text": {
                    "query": "In store",
                    "path": "purchaseMethod"
                }
            },
            "facets": {
                "locationFacet": {
                    "type": "string",
                    "path": "storeLocation",
                }
            }
        }
    }
  }
])


/*
MongoDB Atlas Search

Congratulations on learning about Atlas Search, an incredibly powerful tool for adding search functionality to your apps. In this unit, we covered the basics of Atlas Search, including the following:

    What a search index is.

    How to use a dynamically mapped search index to find results from any field in your data.

    How to use a statically mapped search index to find results from the most relevant parts of your data.

    How to use the aggregation pipeline to complete a $search operation.

    How to use a compound operator to search based on multiple operators.

    How to use a compound operator to give more weight to certain fields and give the user more relevant results.

    How to use $searchMeta and $facet to categorize search results to help your app's users find what they need more quickly

*/



/* Multi-Document Transactions

ACID transactions in MongoDB are typically used only by applications where values are exchanged between different parties, such as banking or business applications. If you find yourself in a scenario where a multi-document transaction is required, it's very likely that you will complete a transaction with one of MongoDB's drivers. For now, let's focus on completing and canceling multi-document transactions in the shell to become familiar with the steps.

Using a Transaction: Video Code

Here is a recap of the code that's used to complete a multi-document transaction:
*/



const session = db.getMongo().startSession()
session.startTransaction()
//const account = session.getDatabase('< add database name here>').getCollection('<add collection name here>')



//Add database operations like .updateOne() here

session.commitTransaction()

/*
Aborting a Transaction

If you find yourself in a scenario that requires you to roll back database operations before a transaction is completed, you can abort the transaction. Doing so will roll back the database to its original state, before the transaction was initiated.

Aborting a Transaction: Video Code

Here is a recap of the code that's used to cancel a transaction before it completes:
*/


const session = db.getMongo().startSession()
session.startTransaction()
const account = session.getDatabase('< add database name here>').getCollection('<add collection name here>')


//Add database operations like .updateOne() here
session.abortTransaction()

/*
Aborting a Transaction

If you find yourself in a scenario that requires you to roll back database operations before a transaction is completed, you can abort the transaction. Doing so will roll back the database to its original state, before the transaction was initiated.

Aborting a Transaction: Video Code

Here is a recap of the code that's used to cancel a transaction before it completes:
*/


const session = db.getMongo().startSession()

session.startTransaction()

const account = session.getDatabase('< add database name here>').getCollection('<add collection name here>')

//Add database operations like .updateOne() here

session.abortTransaction()


const session = db.getMongo().startSession()

session.startTransaction()

const account = session.getDatabase('bank').getCollection('accounts')

account.insertOne({
  account_id: "MDB454252264",
  account_holder: "Florence Taylor",
  account_type: "savings",
  balance: 100.0,
  transfers_complete: [],
  last_updated: new Date()
})
account.updateOne( { account_id: "MDB963134500" }, {$inc: { balance: -100.00 }})

session.commitTransaction()



var session = db.getMongo().startSession()

session.startTransaction()

var account = session.getDatabase('bank').getCollection('accounts')

account.updateOne( { account_id: "MDB740836066" }, {$inc: { balance: 100 }})

account.updateOne( { account_id: "MDB963134500" }, {$inc: { balance: -5 }})

session.abortTransaction()

